<?php

/**
 * @file
 * This module give the possibility to export events in calendars in the
 * iCal format (.ics).
 */

/**
 * Implements hook_menu().
 */
function rooms_ical_menu() {
  $items = array();
  $items['rooms/ical'] = array(
    'title' => 'Export Calendars',
    'description' => 'Export rooms calendars',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('rooms_ical_form'),
    'access arguments' => array('content access'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/rooms/units/unit/%rooms_unit/export'] = array(
    'title' => 'Export Calendar',
    'page callback' => 'rooms_export_calendar',
    'page arguments' => array(4),
    'access callback' => 'rooms_unit_access',
    'access arguments' => array('update availability', 4),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'weight' => '50',
  );

  return $items;
}

/**
 * The form in /rooms/ical.
 */
function rooms_ical_form($form, &$form_state) {
  $form['export_data'] = array(
    '#type' => 'fieldset',
    '#title' => t('Export settings'),
    '#description' => t('Select settings to export events into a .ics file. This will be saved inside "sites/default/files"'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );

  $units_list = rooms_unit_ids();
  ksort($units_list);

  $form['export_data']['unit_select'] = array(
    '#type' => 'select',
    '#title' => t('Select unit to export'),
    '#options' => $units_list,
  );

  $form['export_data']['date_range'] = rooms_date_range_fields();
  $form['export_data']['date_range']['rooms_start_date']['#title'] = t('Export Start');
  $form['export_data']['date_range']['rooms_end_date']['#title'] = t('Export End');
  $form['export_data']['date_range']['rooms_start_date']['#date_year_range'] = '-1:+10';
  $form['export_data']['date_range']['rooms_end_date']['#date_year_range'] = '-1:+10';

  $state_options = array(
    '0' => t('Not Available'),
    '2' => t('On Request'),
    '3' => t('Anonymous Booking'),
    '-1' => t('Unconfirmed Booking'),
    '11' => t('Confirmed Booking'),
  );

  $default_states = array_keys($state_options);

  $form['export_data']['state_options'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Select states to export'),
    '#options' => $state_options,
    '#default_value' => $default_states,
  );
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Export Calendar'),
  );

  return $form;
}

/**
 * The submit form function. Will pass unit and state to export.
 */
function rooms_ical_form_submit($form, &$form_state) {
  $states = array();

  // Create an Array with the states to export.
  foreach ($form_state['values']['state_options'] as $value) {
    if (gettype($value) == 'string') {
      $states[] = $value;
    }
  }

  $unit = rooms_unit_load($form_state['values']['unit_select']);
  $export_start = $form_state['values']['rooms_start_date'];
  $export_end = $form_state['values']['rooms_end_date'];

  generate_ical_format($unit, $states, $export_start, $export_end);
}

/**
 * Export the .ics of the unit from the current date to the last event.
 */
function rooms_export_calendar(RoomsUnit $rooms_unit) {

  // All the states will be exported in the .ics file.
  $states = array('0', '2', '3', '-1', '11');

  // Looking for the last event.
  $last_event = rooms_export_get_last_event($rooms_unit);

  $start = date('Y-m-d');

  // Setting end date to export 1 month over the last event.
  $end = new DateTime($last_event['year'] . '-' . $last_event['month'] . '-' . '01');
  $end = $end->add(new DateInterval('P1M'));
  $end = $end->format('Y-m-d');

  generate_ical_format($rooms_unit, $states, $start, $end);

  drupal_goto('admin/rooms/units');
}

/**
 * Generate the .ics file . Needs $start and $end dates in 'Y-m-d' format.
 */
function generate_ical_format(RoomsUnit $unit, $states, $start, $end) {
  $config = array("unique_id" => $GLOBALS['base_url'], "TZID" => date_default_timezone());
  $vcalendar = new vcalendar($config);
  $vcalendar->setProperty("method", "PUBLISH");
  $vcalendar->setProperty("x-wr-calname", "Rooms Calendar");
  $vcalendar->setProperty("X-WR-CALDESC", "Rooms calendar .ics format");
  $uuid = "3E26604A-50F4-4449-8B3E-E4F4932D05B5";
  $vcalendar->setProperty("X-WR-RELCALID", $uuid);
  $vcalendar->setProperty("X-WR-TIMEZONE", date_default_timezone());

  $config = $vcalendar->getConfig();

  $start_date = explode('-', $start);
  $end_date = explode('-', $end);

  // Check json from the current date to the end date of last event.
  $json = rooms_availability_generate_json($unit, $start_date[0], $start_date[1], $start_date[2], $end_date[0], $end_date[1], $end_date[2], $event_style = ROOMS_AVAILABILITY_ADMIN_STYLE);

  foreach ($json as $event) {
    $start = new DateTime($event['start']);
    $start = $start->format('Ymd\T\13:00:00');
    $end = new DateTime($event['end']);
    $end = $end->format('Ymd\T\13:00:00');

    // Having an event of one single day, we have to set it like an 'All Day'
    // event. we must remove time from the start date and remove end date.
    $all_day = FALSE;
    if ($start == $end) {
      $all_day = TRUE;
    }

    // THE EVENT IS AN UNCONFIRMED EVENT.
    if ((int) $event['id'] < 0 && in_array('-1', $states)) {
      $vevent = new vevent($config);

      if ($all_day) {
        // This will set of one day as an All Day event.
        $vevent->setProperty("DTSTART", $start, array("VALUE" => "DATE"));
      }
      else {
        $vevent->setProperty("DTSTART", $start);
        $vevent->setProperty("DTEND", $end);
      }

      $vevent->setProperty("SUMMARY", $event['title']);
      $vevent->setProperty("LOCATION", $unit->name);

      $vcalendar->setComponent($vevent);
    }

    // THE EVENT IS A CONFIRMED EVENT.
    if ((int) $event['id'] > 11 && in_array('11', $states)) {
      $vevent = new vevent($config);

      if ($all_day) {
        // This will set of one day as an All Day event.
        $vevent->setProperty("DTSTART", $start, array("VALUE" => "DATE"));
      }
      else {
        $vevent->setProperty("DTSTART", $start);
        $vevent->setProperty("DTEND", $end);
      }

      $vevent->setProperty("SUMMARY", 'Booking: ' . $event['title']);
      $vevent->setProperty("LOCATION", $unit->name);

      $vcalendar->setComponent($vevent);
    }

    // THE EVENT IS: NOT-AVAILABLE, ON-REQUEST OR ANONYMOUS BOOKING.
    if (in_array($event['id'], $states)) {
      $vevent = new vevent($config);

      if ($all_day) {
        // This will set of one day as an All Day event.
        $vevent->setProperty("DTSTART", $start, array("VALUE" => "DATE"));
      }
      else {
        $vevent->setProperty("DTSTART", $start);
        $vevent->setProperty("DTEND", $end);
      }

      $vevent->setProperty("SUMMARY", $event['title']);
      $vevent->setProperty("LOCATION", $unit->name);

      $vcalendar->setComponent($vevent);
    }

  }

  // Create the calendar to export.
  $str_ics = $vcalendar->createCalendar();

  // Save the file in /sites/default/files.
  $file_name = $unit->name . '.ics';
  $file = file_unmanaged_save_data($str_ics, 'public://' . $file_name, FILE_EXISTS_RENAME);
  if ($file) {
    drupal_set_message(t('File saved correctly in /sites/default/files'));
  }
  else {
    drupal_set_message(t("Error, can't create the .ics file"), 'error');
  }
}

/**
 * Return the year and the month of the last event of a specific unit.
 */
function rooms_export_get_last_event(RoomsUnit $rooms_unit) {
  $result = db_select('rooms_availability', 't')
    ->fields('t')
    ->condition('unit_id', (int) $rooms_unit->unit_id)
    ->execute()
    ->fetchAll();

  $year = 0;
  $month = 0;
  foreach ($result as $booking) {
    if ($booking->year > $year) {
      $year = $booking->year;
    }
  }

  foreach ($result as $booking) {
    if ($booking->month > $month && $booking->year == $year) {
      $month = $booking->month;
    }
  }

  $event = array(
    'year' => $year,
    'month' => $month,
  );

  return $event;
}
